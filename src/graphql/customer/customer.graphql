# Customer\Customer Related APIs
extend type Query @guard {
    customers(input: FilterCustomerInput): [Customer!] @paginate(type: "paginator" defaultCount:10 resolver: "Webkul\\GraphQLAPI\\Mutations\\Customer\\CustomerMutation@filterCustomer")

    customers_transaction(input: FilterCustomerInput): [Customer!] @paginate(type: "paginator" defaultCount:10 resolver: "Webkul\\GraphQLAPI\\Mutations\\Customer\\CustomerMutation@filterCustomerTransaction")

    customers_events(input: FilterCustomerInput): [Customer!] @paginate(type: "paginator" defaultCount:10 resolver: "Webkul\\GraphQLAPI\\Mutations\\Customer\\CustomerMutation@filterCustomerEvents")

    customer(id: ID @eq): Customer @find(model: "Webkul\\Customer\\Models\\Customer")

    customer_bankdetails(id: ID!): CustomerBankDetails @find(model: "Webkul\\Customer\\Models\\BillingInfos")

    customers_past_transaction(id: ID!): FilterCustomerPastTrans @paginate(type: "paginator" defaultCount:10 resolver: "Webkul\\GraphQLAPI\\Mutations\\Customer\\CustomerMutation@filterPastTransactions")

    customers_pending_transaction(id: ID!): FilterCustomerPendTrans @paginate(type: "paginator" defaultCount:10 resolver: "Webkul\\GraphQLAPI\\Mutations\\Customer\\CustomerMutation@filterPendingTransactions")
}

extend type Mutation @guard {
    createCustomer(
        input: CreateCustomerInput!
    ): Customer @guard @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Customer\\CustomerMutation@store")

    updateCustomer(
        id: ID!,
        input: UpdateCustomerInput!
    ): Customer @guard @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Customer\\CustomerMutation@update")

}

extend type Mutation @guard(with: ["api", "admin-api"]) {

    deleteCustomer(id: ID!): Customer  @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Customer\\CustomerMutation@delete")
}

input CreateCustomerInput {
    firstName: String! @rename(attribute: "first_name")
    lastName: String! @rename(attribute: "last_name")
    gender: String!
    email: String!
    dateOfBirth: String @rename(attribute: "date_of_birth")
#    customerGroupId: Int! @rename(attribute: "customer_group_id")
    phone: String
    notes: String
    status: Boolean
}

input UpdateCustomerInput {
    firstName: String! @rename(attribute: "first_name")
    lastName: String! @rename(attribute: "last_name")
    gender: String
    dateOfBirth: String @rename(attribute: "date_of_birth")
#    customerGroupId: Int! @rename(attribute: "customer_group_id")
    phone: String
    notes: String
    status: Boolean
}

input FilterCustomerInput {
    id: Int
    name: String
    gender: String
    email: String
    dateOfBirth: String @rename(attribute: "date_of_birth")
    groupName: String @rename(attribute: "group_name")
    phone: String
    status: Boolean
}

type Customer {
    id: ID!
    firstName: String! @rename(attribute: "first_name")
    lastName: String! @rename(attribute: "last_name")
    name: String
    customerType: Int @rename(attribute: "customer_type")
    firstLogin: Int @rename(attribute: "first_login")
    socialLogin: Int @rename(attribute: "is_social_login")
    gender: String
    dateOfBirth: String @rename(attribute: "date_of_birth")
    email: String
    phone: String
    notes: String
    image: String
    imageUrl: String @rename(attribute: "image_url")
    password: String!
    apiToken: String @rename(attribute: "api_token")
#    customerGroupId: Int @rename(attribute: "customer_group_id")
    subscribedToNewsLetter: Boolean @rename(attribute: "subscribed_to_news_letter")
    isVerified: Boolean @rename(attribute: "is_verified")
    isSuspended: Boolean @rename(attribute: "is_suspended")
    token: String
    notes: String
    status: Boolean
#    customerGroup: CustomerGroup @belongsTo(relation: "group")
    addresses: [CustomerAddress] @hasMany
    bankDetails: [CustomerBankDetails]
    defaultAddress: CustomerAddress @hasOne(relation: "default_address")
    createdAt: DateTime @rename(attribute: "created_at")
    updatedAt: DateTime @rename(attribute: "updated_at")
    success: String
}

type CustomerBankDetails {
    id: ID!
    customer_id: ID!
    accountHolderName: String! @rename(attribute: "account_holder_name")
    accountHolderType: String! @rename(attribute: "account_holder_type")
    accountNumber: String! @rename(attribute: "account_number")
    routingNumber: String! @rename(attribute: "routing_number")
    country: String!
    currency: String!
    createdAt: DateTime @rename(attribute: "created_at")
    updatedAt: DateTime @rename(attribute: "updated_at")
}

type FilterCustomerPendTrans {
    event_id: ID!
    event_name: String!
    total_amount: Float
    createdAt: DateTime @rename(attribute: "created_at")
}

type FilterCustomerPastTrans {
    transaction_id: ID!
    transferred_amount: Float @rename(attribute: "total_amount")
    description: String!
    status: String!
    date_of_transaction: DateTime @rename(attribute: "created_at")
}