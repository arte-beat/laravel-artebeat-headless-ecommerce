#Catalog\Product Related API

extend type Query @guard{
    products(input: FilterProductsInput @builder(method: "Webkul\\GraphQLAPI\\Queries\\Catalog\\FilterProducts")): [Product!] @paginate(type: "paginator", defaultCount: 10, model: "Webkul\\GraphQLAPI\\Models\\Catalog\\Product")

    product(id: ID @eq): Product @find(model: "Webkul\\GraphQLAPI\\Models\\Catalog\\Product")

    productFlats: [ProductFlat!] @paginate(type: "paginator", defaultCount: 10, model: "Webkul\\Product\\Models\\ProductFlat")

    productFlat(id: ID @eq): ProductFlat @find(model: "Webkul\\Product\\Models\\ProductFlat")

    relatedProducts(productId: Int!): [Product] @field(resolver: "Webkul\\GraphQLAPI\\Queries\\Catalog\\ProductContent@getRelatedProducts")

    getEvent(id: ID @eq): EventBookingResponse @find(model: "Webkul\\GraphQLAPI\\Models\\Catalog\\Product")

    getTickets(input: FilterTicketsInput @builder(method: "Webkul\\GraphQLAPI\\Queries\\Catalog\\FilterTickets")): [TicketBookingResponse!] @paginate(type: "paginator", defaultCount:10 model: "Webkul\\Product\\Models\\EventTickets")

    getShowcase: ShowCaseResponse @field(resolver: "Webkul\\GraphQLAPI\\Queries\\Catalog\\ProductContent@getShowcase")

#    getShowcaseById(id: ID @eq): ShowCaseResponse @find(model: "Webkul\\Product\\Models\\Showcase")

#    getShowcases: [ShowCaseResponse!] @paginate(type: "paginator", defaultCount:10 model: "Webkul\\Product\\Models\\Showcase")

    getMerchant(id: ID @eq): ShowCaseCollectionResponse @find(model: "Webkul\\GraphQLAPI\\Models\\Catalog\\Product")

    getCollections(input: FilterCollectionsInput ): [ShowCaseCollectionResponse!] @paginate(type: "paginator", defaultCount: 10, resolver: "Webkul\\GraphQLAPI\\Mutations\\Catalog\\ProductMutation@collectionFilter")


}


extend type Query @guard(with: ["api", "admin-api"]) {
    getEvents(input: FilterEventsInput ): [EventBookingResponse!]  @paginate(type: "paginator", defaultCount: 10, resolver: "Webkul\\GraphQLAPI\\Mutations\\Catalog\\ProductMutation@eventFilter")

    getallMerchants(input: FilterEventsInput ): [MerchantResponse!]  @paginate(type: "paginator", defaultCount: 10, resolver: "Webkul\\GraphQLAPI\\Mutations\\Catalog\\ProductMutation@merchFilter")

}

extend type Mutation @guard {
    createProduct(input: CreateProductInput!): Product @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Catalog\\ProductMutation@store")

    updateProduct(id: ID!, input: UpdateProductInput!): Product @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Catalog\\ProductMutation@update")

    deleteProduct(id: ID!): Product @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Catalog\\ProductMutation@delete")

    createEventBooking(input: EventBookingInput!): EventBookingResponse @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Catalog\\ProductMutation@storeEventBooking")

    updateEventBooking(id: ID!, input: EventBookingInput!): EventBookingResponse @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Catalog\\ProductMutation@updateEventBooking")

    updateBulkEventBooking(input: BulkEventsInput ): BulkEventResponse!  @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Catalog\\ProductMutation@updateBulkEventType")

    uploadEventImages(product_id: ID!, files: [Upload]): UploadEventImagesResponse @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Catalog\\ProductMutation@uploadEventImages")

    deleteEventBooking(id: ID!): EventBookingResponse @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Catalog\\ProductMutation@deleteEventBooking")

    syncEventPerformer(product_id:ID!, input: SyncEventPerformerInput!): EventPerformerResponse @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Catalog\\ProductMutation@syncEventPerformer")
    
    createMerchantEventBooking(files: [[Upload]], input: [MerchantEventBookingInput]!): [MerchantEventBookingResponse] @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Catalog\\ProductMutation@storeMerchantEventBooking")

    updateMerchantEventBooking(files: [[Upload]], input: [MerchantEventBookingInput]!, deleteInput: [DeleteInput]): [MerchantEventBookingResponse] @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Catalog\\ProductMutation@updateMerchantEventBooking")

    createShowcase(image: Upload, header_image: Upload, section_file: Upload, input: ShowCaseInput!): ShowCaseResponse @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Catalog\\ProductMutation@storeShowCase")

    updateShowcase(image: Upload, header_image: Upload, section_file: Upload, input: ShowCaseInput!): ShowCaseResponse @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Catalog\\ProductMutation@updateShowCase")

    deleteShowcase(id: ID!): Artist @guard @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Catalog\\ProductMutation@deleteShowcase")

    createShowcaseCollection(files: [[Upload]], input: [ShowCaseCollectionInput]!): [ShowCaseCollectionResponse] @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Catalog\\ProductMutation@storeShowcaseCollection")

    updateShowcaseCollection(files: [[Upload]], input: [ShowCaseCollectionInput]!, deleteInput: [DeleteInput]): [ShowCaseCollectionResponse] @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Catalog\\ProductMutation@updateShowcaseCollection")

    changeStatusOfEvent (id: ID!, event_status: Int!): DeleteEventResponse  @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Catalog\\ProductMutation@changeStatusOfEvent")
}

input CreateProductInput {
    type: String!
    attributeFamilyId: Int! @rename(attribute: "attribute_family_id")
    sku: String!
    superAttributes: [SuperAttributesInput] @rename(attribute: "super_attributes")
    family: Int
}

input EventBookingInput {
    locale: String!
    channel: String!
    name: String!
    description: String!
    is_feature_event: Int
    is_hero_event: Int
    commission: Float
    booking: CreateBookingInput

}

input BulkEventsInput
{
    id: [ID]!
    removeId: [ID]!
    is_feature_event: Int
    is_hero_event: Int
}

input MerchantEventBookingInput {
    id: Int
    channel: String
    locale: String
    product_id: Int!
    name: String!
    merch_type: Int!
    description: String!
    price: Float
    commission: Float
    quantity: [QuantityInput]
    removeImages: [RemoveImagesInput]
}

input DeleteInput {
    id: Int
}

input RemoveImagesInput {
    id: Int
}

input ShowCaseCollectionInput {
    product_id: Int
    commission: Float
    showcase_id: Int
    channel: String
    locale: String
    showcase_id: Int!
    name: String!
    description: String!
    price: Float
    quantity: [QuantityInput]
    removeImages: [RemoveImagesInput]
}

input ShowCaseInput {
    id: Int
    title: String!
    introduction: String!
    description: String!
    website: String
    tiktok: String
    twitter: String
    instagram: String
    collection_desc: String
}

input QuantityInput {
    qty: Int!
    size: String!
}

input SuperAttributesInput {
    attributeCode: String! @rename(attribute: "attribute_code")
    values: [Int!]
}

input UpdateProductInput {
    channel: String!
    locale: String!
    sku: String!
    name: String!
    productNumber: String @rename(attribute: "product_number")
    urlKey: String! @rename(attribute: "url_key")
    taxCategoryId: Int @rename(attribute: "tax_category_id")
    new: Boolean
    featured: Boolean
    visibleIndividually: Boolean @rename(attribute: "visible_individually")
    status: Boolean
    guestCheckout: Boolean @rename(attribute: "guest_checkout")
    color: Int
    size: Int
    shortDescription: String! @rename(attribute: "short_description")
    description: String!
    metaTitle: String @rename(attribute: "meta_title")
    metaKeywords: String @rename(attribute: "meta_keywords")
    metaDescription: String @rename(attribute: "meta_description")
    price: Float!
    cost: Float
    specialPrice: Float @rename(attribute: "special_price")
    specialPriceFrom: String @rename(attribute: "special_price_from")
    specialPriceTo: String @rename(attribute: "special_price_to")
    length: Float
    width: Float
    height: Float
    depth: Float
    weight: Float!
    customerGroupPrices: [CustomerGroupPriceInput] @rename(attribute: "customer_group_prices")
    inventories: [InventoriesInput!]
    categories: [Int!]
    channels: [Int!]
    relatedProducts: [Int] @rename(attribute: "related_products")
    upSell: [Int] @rename(attribute: "up_sell")
    crossSells: [Int] @rename(attribute: "cross_sells")
    images: [String]
    videos: [String]
    defaultVariantId: ID @rename(attribute: "default_variant_id")
    variants: [UpdateVariantInput!]
    links: [UpdateGroupedProductInput!]
    downloadableLinks: [UpdateDownloadableLinksInput!] @rename(attribute: "downloadable_links")
    downloadableSamples: [UpdateDownloadableSamplesInput!] @rename(attribute: "downloadable_samples")
    bundleOptions: [UpdateBundleOptionsInput!] @rename(attribute: "bundle_options")
    booking: UpdateBookingInput
}

input UpdateVariantInput {
    variantId: Int! @rename(attribute: "variant_id")
    sku: String!
    name: String!
    color: Int
    size: Int
    inventories: [VariantInventoryInput!]
    price: Float!
    weight: Float!
    status: Boolean!
}

input VariantInventoryInput {
    inventorySourceId: Int! @rename(attribute: "inventory_source_id")
    qty: Int!
}

input FilterProductsInput {
    id: ID
    type: String
    sku: String
    parentId: ID @rename(attribute: "parent_id")
    attributeFamily: String @rename(attribute: "attribute_family")
    qty: Int
}

input FilterCollectionsInput {
    id: ID
    name: String
}

input FilterEventsInput {
    event_status: Int
    name: String
    owner_type: String
    owner_id: Int
    is_feature_event: Int
    is_hero_event: Int

    ticket_price_min: Int
    ticket_price_max: Int

    distance_min:Int
    distance_max:Int

    clinet_location_longitude:Float
    clinet_location_latitude:Float

    event_category: String  # Exhibitions, Art Gallery, Immersive experience, Fashion Show
    search_text:String #search for event name, artist and promoter
    weekly_events : Int
}


input FilterTicketsInput {
    ticket_type: String
    event_name: String
}

input EventPerformer {
    id: Int
    product_id: Int!
    artists: [Int]
    promoters: [Int]
}

input SyncEventPerformerInput {    
    artistIds:[Int]
    artistNames:[String]
    artistTypes:[Int]

    promoterIds:[Int]
    promoterNames:[String]
    promoterTypes:[Int]
}

type EventBookingResponse {
    id: ID!
    type: String!
    event_status: Int
    parentId: ID @rename(attribute: "parent_id")
    parent: EventBookingResponse @belongsTo(relation: "parent")
    isHeroEvent: Int @rename(attribute: "is_hero_event")
    isFeatureEvent: Int @rename(attribute: "is_feature_event")
    productFlats: [ProductFlat!] @hasMany(relation: "product_flats")
    createdAt: DateTime @rename(attribute: "created_at")
    updatedAt: DateTime @rename(attribute: "updated_at")
    booking: BookingProduct @hasOne(relation: "booking_product")
    images: [Image!] @hasMany
    artists: [Artist] @hasMany
    promoters: [Promoter] @hasMany
    merchants: [MerchantEventBookingResponse!] @hasMany
    success: String
    owner: Owner! @hasOne
    commission : Float
}

type MerchantResponse {
    id: ID!
    type: String!
    parentId: ID @rename(attribute: "parent_id")
    parent: EventBookingResponse @belongsTo(relation: "parent")
    productFlats: [ProductFlat!] @hasMany(relation: "product_flats")
    createdAt: DateTime @rename(attribute: "created_at")
    updatedAt: DateTime @rename(attribute: "updated_at")
    images: [Image!] @hasMany
    quantities: [Quantity!] @hasMany
    owner: Owner @hasOne
    success: String
}

type TicketBookingResponse {
    id: ID!
    productId: ID @rename(attribute: "booking_product_id")
    product: Product @hasOne(relation: "product")
    ticketType: TicketType @hasOne(relation: "product_event_ticket_type")
    price: Float
    qty: Float
}
type Owner {
    id: ID!
    name: String!
    email:String!
}

type TicketType {
    name: String!
}

type UploadEventImagesResponse {
    product_id: ID!
    images: [Image!] @hasMany
}

type MerchantEventBookingResponse {
    id: ID!
    commission: Float
    parentId: ID @rename(attribute: "parent_id")
    productFlats: [ProductFlat!] @hasMany(relation: "product_flats")
    images: [Image!] @hasMany
    quantities: [Quantity!] @hasMany
    createdAt: DateTime @rename(attribute: "created_at")
    updatedAt: DateTime @rename(attribute: "updated_at")
    success: String
}

type ShowCaseCollectionResponse {
    product_id: ID! @rename(attribute: "id")
    commission: Float
    productFlats: [ProductFlat!] @hasMany(relation: "product_flats")
    images: [Image!] @hasMany
    quantities: [Quantity!] @hasMany
    createdAt: DateTime @rename(attribute: "created_at")
    updatedAt: DateTime @rename(attribute: "updated_at")
    success: String
}

type ShowCaseResponse {
    id: ID!
    title: String!
    introduction: String!
    description: String!
    image: String @rename(attribute: "image_link")
    header_image: String @rename(attribute: "header_image_link")
    section_file: String @rename(attribute: "section_file_link")
    website: String
    tiktok: String
    twitter: String
    instagram: String
    collection_desc: String
    collections: [ShowCaseCollectionResponse!] @hasMany
    createdAt: DateTime @rename(attribute: "created_at")
    updatedAt: DateTime @rename(attribute: "updated_at")
    success: String
}

type Quantity {
    id: ID!
    productId: ID @rename(attribute: "product_id")
    qty: Int
    size: String
}

type Product {
    id: ID!
    type: String!
    attributeFamilyId: Int! @rename(attribute: "attribute_family_id")
    name: String! @rename(attribute: "sku")
    sku: String!
    urlKey: String! @rename(attribute: "url_key")
    name: String
    description: String
    shortDescription: String @rename(attribute: "short_description")
    new: Boolean
    featured: Boolean
    status: Boolean
    visibleIndividually: Boolean @rename(attribute: "visible_individually")
    guestCheckout: Boolean @rename(attribute: "guest_checkout")
    parentId: ID @rename(attribute: "parent_id")
    createdAt: DateTime @rename(attribute: "created_at")
    updatedAt: DateTime @rename(attribute: "updated_at")
    configutableData: ConfigutableProductData @field(resolver: "Webkul\\GraphQLAPI\\Queries\\Catalog\\ProductContent@getConfigurableData")
    shareURL: String @field(resolver: "Webkul\\GraphQLAPI\\Queries\\Catalog\\ProductContent@getProductShareUrl")
    productFlats: [ProductFlat!] @hasMany(relation: "product_flats")
    variants: [Product] @hasMany
    parent: Product @belongsTo(relation: "parent")
    attributeFamily: AttributeFamily! @belongsTo(relation: "attribute_family")
    attributeValues: [ProductAttributeValue!] @hasMany(relation: "attribute_values")
    superAttributes: [Attribute!] @belongsToMany(relation: "super_attributes")
    categories: [Category!] @belongsToMany(relation: "categories")
    inventories: [Inventory!] @hasMany
    images: [Image!] @hasMany
    cacheBaseImage: CacheImage @field(resolver: "Webkul\\GraphQLAPI\\Queries\\Catalog\\ProductContent@getProductBaseImage")
    cacheGalleryImages: [CacheImage] @field(resolver: "Webkul\\GraphQLAPI\\Queries\\Catalog\\ProductContent@getCacheGalleryImages")
    videos: [Video!] @hasMany
    additionalData: [ProductAdditionalData] @field(resolver: "Webkul\\GraphQLAPI\\Queries\\Catalog\\ProductContent@getAdditionalData")
    isInWishlist: Boolean @field(resolver: "Webkul\\GraphQLAPI\\Queries\\Catalog\\ProductContent@checkIsInWishlist")
    priceHtml: ProductPriceHtml @field(resolver: "Webkul\\GraphQLAPI\\Queries\\Catalog\\ProductContent@getProductPriceHtml")
    orderedInventories: [OrderInventory!] @hasMany(relation: "ordered_inventories")
    reviews: [Review] @field(resolver: "Webkul\\GraphQLAPI\\Queries\\Catalog\\ProductContent@getReviews")
    averageRating: String @field(resolver: "Webkul\\GraphQLAPI\\Queries\\Catalog\\ProductContent@getAverageRating")
    percentageRating: [Int] @field(resolver: "Webkul\\GraphQLAPI\\Queries\\Catalog\\ProductContent@getPercentageRating")
    customerGroupPrices: [CustomerGroupPrice] @belongsToMany(relation: "customer_group_prices")
    downloadableSamples: [ProductDownloadableSample] @hasMany(relation: "downloadable_samples")
    downloadableLinks: [ProductDownloadableLink] @hasMany(relation: "downloadable_links")
    groupedProducts: [ProductGroupedProduct] @hasMany(relation: "grouped_products")
    bundleOptions: [ProductBundleOption] @hasMany(relation: "bundle_options")
    booking: BookingProduct @hasOne(relation: "booking_product")
    sameDaySlots: [BookingDaySlots!] @rename(attribute: "same_day_slots")
    differentDaySlots: [BookingDaySlots!] @rename(attribute: "different_day_slots")
    relatedProducts: [Product!] @belongsToMany(relation: "related_products")
    cart: Cart @field(resolver: "Webkul\\GraphQLAPI\\Queries\\Velocity\\Cart@getCart")
    # up_sells: [Product] @belongsToMany
    # cross_sells: [Product] @belongsToMany
    success: String
}

type ProductFlat {
    id: ID!
    sku: String!
    productNumber: String @rename(attribute: "product_number")
    name: String
    merch_type: Int
    description: String
    shortDescription: String @rename(attribute: "short_description")
    urlKey: String @rename(attribute: "url_key")
    new: Boolean
    featured: Boolean
    status: Boolean
    visibleIndividually: Boolean @rename(attribute: "visible_individually")
    thumbnail: String
    price: Float @rename(attribute: "product_price")
    cost: Float
    specialPrice: Float @rename(attribute: "special_price")
    specialPriceFrom: String @rename(attribute: "special_price_from")
    specialPriceTo: String @rename(attribute: "special_price_to")
    weight: Float
    color: Int
    colorLabel: String @rename(attribute: "color_label")
    size: Int
    sizeLabel: String @rename(attribute: "size_label")
    locale: String!
    channel: String!
    productId: ID! @rename(attribute: "product_id")
    parentId: Int @rename(attribute: "parent_id")
    minPrice: Float @rename(attribute: "min_price")
    maxPrice: Float @rename(attribute: "max_price")
    metaTitle: String @rename(attribute: "meta_title")
    metaKeywords: String @rename(attribute: "meta_keywords")
    metaDescription: String @rename(attribute: "meta_description")
    width: Float
    height: Float
    depth: Float
    product: Product! @belongsTo(relation: "product")
    variants: [ProductFlat] @hasMany
    parent: ProductFlat @belongsTo(relation: "parent")
    createdAt: String @rename(attribute: "created_at")
    updatedAt: String @rename(attribute: "updated_at")
}

type ProductAttributeValue {
    id: ID!
    productId: ID! @rename(attribute: "product_id")
    attributeId: ID! @rename(attribute: "attribute_id")
    locale: String
    channel: String
    textValue: String @rename(attribute: "text_value")
    booleanValue: Boolean @rename(attribute: "boolean_value")
    integerValue: Int @rename(attribute: "integer_value")
    floatValue: Float @rename(attribute: "float_value")
    dateTimeValue: String @rename(attribute: "datetime_value")
    dateValue: String @rename(attribute: "date_value")
    jsonValue: String @rename(attribute: "json_value")
    attribute: Attribute! @belongsTo(relation: "attribute")
    product: Product! @belongsTo(relation: "product")
}

type ProductAdditionalData {
    id: ID
    code: String
    label: String
    value: String
    admin_name: String
    type: String
}

type ProductPriceHtml {
    id: ID!
    type: String
    html: String
    regular: String
    regularWithoutCurrencyCode: String
    special: String
    specialWithoutCurrencyCode: String
    currencyCode: String
}

type EventPerformerResponse {
    id: ID!
    productId: Int!
    artists: [Artist!]!
    promoters: [Promoter!]!
    createdAt: DateTime @rename(attribute: "created_at")
    updatedAt: DateTime @rename(attribute: "updated_at")
}

type BulkEventResponse {
    success: String
}