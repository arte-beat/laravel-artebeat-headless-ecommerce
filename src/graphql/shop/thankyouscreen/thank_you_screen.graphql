# Shop\Checkout\Addresses Related API
extend type Query @guard(with: ["api", "admin-api"]){
  #  thankYouScreen(order_id: ID!): ThankYouScreenResponse @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\ThankYouScreen\\ThankYouScreenMutation@getThankyouScreenData")
    thankYouScreen(order_id: ID!): [ThankYouScreenDataResponse]  @paginate(type: "paginator" defaultCount:10 resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\ThankYouScreen\\ThankYouScreenMutation@getThankyouScreenData")

    downloadTicket(order_id: ID!, product_id: ID!,ticket_id: ID!): DownloadTicketResponse @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\ThankYouScreen\\ThankYouScreenMutation@downloadTicket")

    emailEventTicket(order_id: ID!, product_id: ID!,ticket_id: ID!): DownloadTicketResponse @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\ThankYouScreen\\ThankYouScreenMutation@emailEventTicket")

    downloadInvoice(order_id: ID!): DownloadTicketResponse @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\ThankYouScreen\\ThankYouScreenMutation@downloadInvoice")

    emailInvoice(order_id: ID!): DownloadTicketResponse @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\ThankYouScreen\\ThankYouScreenMutation@emailInvoice")

    getBookedMerchants(order_id: ID!): BookedMerchantResponse!  @paginate(type: "paginator" defaultCount:10 resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\ThankYouScreen\\ThankYouScreenMutation@getBookedMerchants")

    getBookedEvents(order_id: ID!): CustomerTicketResponse!  @paginate(type: "paginator" defaultCount:10 resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\ThankYouScreen\\ThankYouScreenMutation@getBookedEvents")

    getAllDetailsByOrder(order_id: ID!): CustomerOrderResponse!  @paginate(type: "paginator" defaultCount:10 resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\ThankYouScreen\\ThankYouScreenMutation@getAllDetailsByOrder")

    getOrderDetails(order_id: ID!): OrderDetailResponse!  @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\ThankYouScreen\\ThankYouScreenMutation@getOrderData")
}

extend type Query {
    thankYouScreenQRCode(order_id: ID!, product_id: ID!): ThankYouScreenQRCodeResponse @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\ThankYouScreen\\ThankYouScreenMutation@getQRCodeData")
    qrScanningScreen(ticket_id: ID!): ThankYouScreenDataResponse  @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\ThankYouScreen\\ThankYouScreenMutation@getQrScanningScreenData")

    qrCheckInScreen(ticket_id: ID!,event_pwd:String!): ThankYouScreenDataResponse  @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\ThankYouScreen\\ThankYouScreenMutation@getQRCheckInScreen")
}

type OrderDetailResponse {
    order_id: String
    status: String
    customer_name: String
    total_fees: Float
    customer_email: String
    grand_total: Float
    method: String
    total_qty_ordered: Int
    address1: String
    address2: String
    city: String
    state: String
    country: String
    postcode: String
    created_at: String
    updated_at: String
    address_info: String
    shipping_description: String
}

type CustomerOrderResponse
{
    id : Int
    quantity: Int
    ticket_id: Int
    order_id: Int
    createdAt: DateTime @rename(attribute: "created_at")
    updatedAt: DateTime @rename(attribute: "updated_at")
    success: String
    ticketType: String
    firstname: String
    lastname: String
    email: String
    status: String
    basePrice: Float
    purchasedQuantity: Int
    price : Float
    productName: String
    order_payment_id: Int
    method: String
    productType: String
    total_with_commission: Float
    images: [Image!] @hasMany
    artists: [Artist!]!
    promoters: [Promoter!]!
    productFlats: [ProductFlat!] @hasMany(relation: "product_flats")
    booking: BookingProduct @hasOne(relation: "booking_product")
    orderedDate : DateTime @rename(attribute: "orderDate")
    orderedTicketId: Int
    qrCode:String
    is_checkedIn:String
    checkedIn_time:String
    name_counter:Int
}

type DownloadTicketResponse{
    url: String
    message: String
}

type ThankYouScreenResponse {
    orderStatus: String
    orderId: String
    orderPlacedOn: String
    paymentMethod: String
    customerFirstName: String
    customerLastName: String
    customerEmail: String
    customerPhone: String
    customerAddressFirstName: String
    customerAddressLastName: String
    customerAddressEmail: String
    customerAddress1: String
    customerAddress2: String
    customerAddressCity: String
    customerAddressState: String
    customerAddressCountry: String
    customerAddressPostCode: String
    thankYouScreenData: [ThankYouScreenData]
}

type ThankYouScreenData{
    id: ID!
    noOfTickets: Int
    artists: [Artist] @hasMany
    promoters: [Promoter] @hasMany
    booking: BookingProduct @hasOne(relation: "booking_product")
    productFlats: [ProductFlat!] @hasMany(relation: "product_flats")
    ticketorders: [TicketOrderResponse]
    merchants: [MerchantEventBookingResponse!] @hasMany
    images: [Image!] @hasMany
    createdAt: String @rename(attribute: "created_at")
    updatedAt: String @rename(attribute: "updated_at")
    success: String
}

type ThankYouScreenDataResponse{
    id: ID!
    orderedTicketId: Int
    cart_id: Int
    order_id: Int
    product_id: Int
    product_event_id: Int
    ticket_id: Int
    first_name: String
    last_name: String
    email: String
    qrCode: String
    is_checkedIn: Boolean
    checkedIn_time: String
    artists: [Artist] @hasMany
    promoters: [Promoter] @hasMany
    booking: BookingProduct @hasOne(relation: "booking_product")
    productFlats: [ProductFlat] @hasMany(relation: "product_flats")
    merchants: [MerchantEventBookingResponse] @hasMany
    images: [Image] @hasMany
    createdAt: String @rename(attribute: "created_at")
    updatedAt: String @rename(attribute: "updated_at")
    success: String
    name_counter: Int
}


type ThankYouScreenQRCodeResponse{
    id: ID!
    noOfTickets: Int
    artists: [Artist] @hasMany
    promoters: [Promoter] @hasMany
    booking: BookingProduct @hasOne(relation: "booking_product")
    productFlats: [ProductFlat!] @hasMany(relation: "product_flats")
    ticketorders: [TicketOrderResponse]
    merchants: [MerchantEventBookingResponse!] @hasMany
    images: [Image!] @hasMany
    createdAt: String @rename(attribute: "created_at")
    updatedAt: String @rename(attribute: "updated_at")
    success: String
    orderStatus: String
    orderId: String
    orderPlacedOn: String
    paymentMethod: String
    customerFirstName: String
    customerLastName: String
    customerEmail: String
    customerPhone: String
    customerAddressFirstName: String
    customerAddressLastName: String
    customerAddressEmail: String
    customerAddress1: String
    customerAddress2: String
    customerAddressCity: String
    customerAddressState: String
    customerAddressCountry: String
    customerAddressPostCode: String
}