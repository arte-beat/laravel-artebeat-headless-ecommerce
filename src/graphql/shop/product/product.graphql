extend type Query @guard(with: ["api"]){
    productBySlug(slug: String): ProductFlat @field(resolver: "Webkul\\GraphQLAPI\\Queries\\Shop\\Product\\ProductListingQuery@findBySlugOrFail")

#    getEventsByEventOrganizer(input: FilterEventsInputByEventOrganizer @builder(method: "Webkul\\GraphQLAPI\\Queries\\Shop\\Product\\FilterEvents")): [EventBookingResponse!]  @paginate(type: "paginator", defaultCount: 10, model: "Webkul\\GraphQLAPI\\Models\\Catalog\\Product")

    getAttemptEventsMerchant(input: AttemptEventInput ): [[BookedEventResponse]]! @field( resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Product\\ProductMutation@getAttemptEventsMerchant")



    getMyeventsDataByEventOrganizer(product_id: ID!): MyEventsResponse!  @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Product\\ProductMutation@getMyeventsDataByEventOrganizer")

    getBookedTicketsByEventOrganizer(product_id: ID!,input: FilterEventsInputByEventOrganizer): BookedTicketResponse!  @paginate(type: "paginator" defaultCount:10 resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Product\\ProductMutation@getBookedTicketsByEventOrganizer")

     getBookedTicketsByCustomer: CustomerTicketResponse!  @paginate(type: "paginator" defaultCount:10 resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Product\\ProductMutation@getBookedTicketListByCustomer")

    getBookedMerchantListByEvent(product_id: ID!,input: FilterEventsInputByEventOrganizer): BookedMerchantResponse!  @paginate(type: "paginator" defaultCount:10 resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Product\\ProductMutation@getBookedMerchantListByEvent")

    getBookedMerchantsByCustomers: BookedMerchantResponse!  @paginate(type: "paginator" defaultCount:10 resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Product\\ProductMutation@getBookedMerchantListByEvent")

    downloadEventTickets(product_id: ID!): DownloadTicketResponse @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Product\\ProductMutation@downloadEventTickets")

    downloadMerchTickets(product_id: ID!): DownloadTicketResponse @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Product\\ProductMutation@downloadMerchTickets")
}

extend type Query{
    getFeaturedEventsByEventOrganizer(input: FilterEventsInput): [EventBookingResponse!] @paginate(type: "paginator", defaultCount: 10, resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Product\\ProductMutation@featureEventFilter")

    getEventsByEventOrganizer(input: FilterEventsInput): [EventBookingResponse!] @paginate(type: "paginator", defaultCount: 10, resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Product\\ProductMutation@eventFilter")

    getSimilarEvents(input: SimilarFilterEventsInput!): [EventBookingResponse!] @paginate(type: "paginator", defaultCount: 10, resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Product\\ProductMutation@similarEventFilter")

    getParticularEventsByEventOrganizer(input: FilterEventsInput): [EventBookingResponse!] @paginate(type: "paginator", defaultCount: 10, resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Product\\ProductMutation@particularEventFilter")
    topsellingMerchant(input: TopSellingProductInput ): [BookedEventResponse]! @field( resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Product\\ProductMutation@topsellingMerchant")

    getRandomMerchant(input: TopSellingProductInput ): [BookedEventResponse]! @field( resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Product\\ProductMutation@getRandomMerchant")

    getEventByEventOrganizer(id: ID @eq): EventBookingResponse @find(model: "Webkul\\GraphQLAPI\\Models\\Catalog\\Product")

    getMerchantByEventOrganizer(id: ID @eq): ShowCaseCollectionResponse @find(model: "Webkul\\GraphQLAPI\\Models\\Catalog\\Product")

    getMerchantByEvent(id: ID!, input: FilterEventsInput): [MerchantEventBookingResponse!] @paginate(type: "paginator", defaultCount: 10, resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Product\\ProductMutation@getMerchantByEvent")

    getShowcaseByEventOrganizer: ShowCaseResponse @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Product\\ProductMutation@getShowcase")

    # Promoter Related Queries
    getPromotersByEventOrganizer(input: FilterPromoterInput): [Promoter!] @paginate(type: "paginator" defaultCount:10 resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Product\\ProductMutation@filterPromoter")

    getPromoterByEventOrganizer(id: ID @eq): Promoter @find(model: "Webkul\\Product\\Models\\Promoter")

    eventCategoriesByEventOrganizer(input: FilterEventCategoryInput ): [EventCategory!] @paginate(type: "paginator" defaultCount:10 resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Product\\ProductMutation@filterEventCategory")
}


extend type Query @guard(with: ["api", "admin-api"]){

    getCollectionByShowcase(id:ID!, input: FilterCollectionsInput ): [ShowCaseCollectionResponse!] @paginate(type: "paginator", defaultCount: 10, resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Product\\ProductMutation@getShowcaseCollectionByShowcase")

    getPastEvents(input: FilterEventsInput): [EventBookingResponse!] @paginate(type: "paginator", defaultCount: 10, resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Product\\ProductMutation@getPastEvents")

    getFutureEvents(input: FilterEventsInput): [EventBookingResponse!] @paginate(type: "paginator", defaultCount: 10, resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Product\\ProductMutation@getFutureEvents")

    getOngoingEvents(input: FilterEventsInput): [EventBookingResponse!] @paginate(type: "paginator", defaultCount: 10, resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Product\\ProductMutation@getOngoingEvents")
}

extend type Mutation @guard(with: ["api"]) {
    createEventBookingByEventOrganizer(input: EventBookingInput!): EventBookingResponse @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Product\\ProductMutation@storeEventBooking")

    updateEventBookingByEventOrganizer(id: ID!, input: EventBookingInput!): EventBookingResponse @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Product\\ProductMutation@updateEventBooking")

    uploadEventImagesByEventOrganizer(product_id: ID!, files: [Upload]): UploadEventImagesResponse @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Product\\ProductMutation@uploadEventImages")

    deleteEventBookingByEventOrganizer(id: ID!): Product @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Product\\ProductMutation@deleteEventBooking")

    # Promoter Related Mutations
    createPromoterByEventOrganizer(
        input: PromoterInput!
    ): Promoter @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Product\\ProductMutation@storePromoter")

    updatePromoterByEventOrganizer(
        id: ID!,
        input: PromoterInput!
    ): Promoter @guard @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Product\\ProductMutation@updatePromoter")

    deletePromoterByEventOrganizer(id: ID!): Promoter @guard @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Product\\ProductMutation@deletePromoter")

    syncEventPerformerByEventOrganizer(product_id:ID!, input: SyncEventPerformerInput!): EventPerformerResponse @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Product\\ProductMutation@syncEventPerformer")

    createMerchantEventBookingByEventOrganizer(files: [[Upload]], input: [MerchantEventBookingInput]!): [MerchantEventBookingResponse] @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Product\\ProductMutation@storeMerchantEventBooking")

    updateMerchantEventBookingByEventOrganizer(files: [[Upload]], input: [MerchantEventBookingInput]!, deleteInput: [DeleteInput]): [MerchantEventBookingResponse] @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Product\\ProductMutation@updateMerchantEventBooking")
}

input FilterEventsInputByEventOrganizer {
    name: String

}

input SimilarFilterEventsInput {
    event_id : Int
    event_type : Int
}

input AttemptEventInput {
    limit : Int
}

input TopSellingProductInput {
    distance : Int
    latitude : Float!
    longitude : Float!
}

type BookedEventResponse
{
    id: Int
    event_status: Int
    parentId: ID @rename(attribute: "parent_id")
    productFlats: [ProductFlat!] @hasMany(relation: "product_flats")
    images: [Image!] @hasMany
    quantities: [Quantity!] @hasMany
    createdAt: DateTime @rename(attribute: "created_at")
    updatedAt: DateTime @rename(attribute: "updated_at")
    success: String
}

type MyEventsResponse
{
    id: Int
    event_status: Int
    noOfTickets: Int
    noOfMerchant: Int
    images: [Image!] @hasMany
    artists: [Artist!]!
    promoters: [Promoter!]!
    createdAt: DateTime @rename(attribute: "created_at")
    updatedAt: DateTime @rename(attribute: "updated_at")
    success: String
    total_price : Float
    booking: BookingProduct @hasOne(relation: "booking_product")
    productFlats: [ProductFlat!] @hasMany(relation: "product_flats")
}

type BookedTicketResponse
{
    quantity: Int
    ticket_id: Int
    order_id: Int
    createdAt: DateTime @rename(attribute: "created_at")
    updatedAt: DateTime @rename(attribute: "updated_at")
    success: String
    ticketType: String
    firstname: String
    lastname: String
    email: String
    status: String
    price : Float
    booking: BookingProduct @hasOne(relation: "booking_product")
    deliveryStatus: Int
}

type CustomerTicketResponse
{
    id : Int
    quantity: Int
    ticket_id: Int
    order_id: Int
    createdAt: DateTime @rename(attribute: "created_at")
    updatedAt: DateTime @rename(attribute: "updated_at")
    success: String
    ticketType: String
    firstname: String
    lastname: String
    email: String
    status: String
    basePrice: Float
    purchasedQuantity: Int
    price : Float
    productName: String
    images: [Image!] @hasMany
    artists: [Artist!]!
    promoters: [Promoter!]!
    productFlats: [ProductFlat!] @hasMany(relation: "product_flats")
    booking: BookingProduct @hasOne(relation: "booking_product")
    orderedDate : DateTime @rename(attribute: "orderDate")
    orderedTicketId: Int
    qrCode:String
    is_checkedIn:String
}

type BookedMerchantResponse
{
    id: Int
    quantity: Int
    order_id: Int
    ticket_id: Int
    createdAt: DateTime @rename(attribute: "created_at")
    updatedAt: DateTime @rename(attribute: "updated_at")
    success: String
    firstname: String @rename(attribute: "first_name")
    lastname: String @rename(attribute: "last_name")
    email: String
    productName: String
    basePrice: Float
    purchasedQuantity: Int
    price : Float
    images: [Image!] @hasMany
    productFlats: [ProductFlat!] @hasMany(relation: "product_flats")
    quantities: [Quantity!] @hasMany
    address_type: String
    address1: String
    address2: String
    postcode: Int
    city: String
    state: String
    country: String
    phone: String
    status: String
    deliveryStatus: Int
}