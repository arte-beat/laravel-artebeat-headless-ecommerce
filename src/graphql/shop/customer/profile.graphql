#Shop\Customer\Profile Related APIs
extend type Query @guard(with: ["api"]) {
    # Please
    getProfile: ProfileInfoResult @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Customer\\ProfileMutation@get")

    getOrganizerProfileDetails:EventOrganizerProfileDetailsOutput @paginate(type: "paginator", defaultCount: 10, resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Customer\\ProfileMutation@getOrganizerProfileDetails")

    getAllPaymentsHistory:BookingPaymentsAndTransactionsResponse!  @paginate(type: "paginator", defaultCount: 10, resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Customer\\ProfileMutation@getAllPaymentsHistory")

}

extend type Mutation @guard(with: ["api"]) {
    updateProfile(
        input: UpdateProfileInput!
    ): ProfileInfoResult @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Customer\\ProfileMutation@update")

    changeCustomerType(
        input: ChangeCustomerTypeInput!
    ): ChangeCustomerTypeResponse  @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Customer\\ProfileMutation@changeCustomerType")

    deleteProfile(
        input: DeleteProfileInput!
    ): ProfileDeleteResponse  @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Customer\\ProfileMutation@delete")

    saveCardDetails( input: CardDetailsInput!): CardDetailsOutput @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Customer\\ProfileMutation@saveCardDetails")

    updateCardDetails(   id: ID!,  input: UpdateCardDetailsInput!): CardDetailsOutput @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Customer\\ProfileMutation@updateCardDetails")
    deleteCardDetails(id: ID!): CardDetailsOutput  @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Customer\\ProfileMutation@deleteCardDetails")


    saveBankDetails( input: BankDetailsInput!): CardDetailsOutput @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Customer\\ProfileMutation@saveBankDetails")

    updateBankDetails(   id: ID!,  input: BankDetailsInput!): CardDetailsOutput @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Customer\\ProfileMutation@updateBankDetails")
    deleteBankDetails(id: ID!): CardDetailsOutput  @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Customer\\ProfileMutation@deleteBankDetails")
}

input UpdateProfileInput {
    firstName: String @rename(attribute: "first_name")
    lastName: String @rename(attribute: "last_name")
    gender: String
#    email: String
    dateOfBirth: String @rename(attribute: "date_of_birth")
    phone: String
    oldpassword: String
    password: String
    passwordConfirmation: String @rename(attribute: "password_confirmation")
    uploadType: UploadType @rename(attribute: "upload_type")
    imageUrl: String @rename(attribute: "image_url")
    image: Upload
}

input CardDetailsInput {
    stripeToken: String!
    object: String,
    card : [CardResponseInput]!
    client_ip: String,
    created: Int,
    livemode: Boolean,
    type: String,
    used: Boolean
}

input UpdateCardDetailsInput {
    name: String!
}
input CardResponseInput
{
    id: String !,
    object: String ,
    address_city: String ,
    address_country: String ,
    address_line1: String ,
    address_line1_check: String,
    address_line2: String,
    address_state: String,
    address_zip: String,
    address_zip_check: String,
    brand: String!,
    name: String!,
    country: String!,
    cvc_check: String,
    dynamic_last4: String,
    exp_month: Int!,
    exp_year: Int!,
    funding: String!,
    last4: Int!,
    name: String,
    tokenization_method: String,
    wallet: String
}

input ChangeCustomerTypeInput {
    password: String
    cutomerType: Int!
}

input DeleteProfileInput {
    password: String!
}

input BankDetailsInput {
    id : Int
    account_holder_name: String,
    account_holder_type: String,
    account_type: String,
    account_number: String,
    country: String,
    currency: String,
    routing_number: String
}
input BankMetaDataInput {
    order_id: Int
}

type ProfileInfoResult {
    status: Boolean
    message: String
    customer: Customer
}

type ChangeCustomerTypeResponse {
    status: Boolean
    success: String
}

type ProfileDeleteResponse {
    status: Boolean
    success: String
}
type CardDetailsOutput {
    id : Int
    customer_id : Int
    card_id : String
    name : String
    brand: String
    funding: String
    type: String
    country: String
    exp_month : Int
    last4:Int
    card_response: String
    success: String
    account_holder_type : String
    account_type: String
    bank_name: String
    currency: String
    fingerprint: String
    createdAt: DateTime @rename(attribute: "created_at")
    updatedAt: DateTime @rename(attribute: "updated_at")

}


type EventOrganizerProfileDetailsOutput {
    id : Int
    firstName: String! @rename(attribute: "first_name")
    lastName: String! @rename(attribute: "last_name")
    name: String
    image: String
    imageUrl: String @rename(attribute: "image_url")
    paymentMethods : [CardDetailsOutput] @hasOne(relation: "payment_methods")
    defaultAddress: CustomerAddress @hasOne(relation: "default_address")
    createdAt: DateTime @rename(attribute: "created_at")
    updatedAt: DateTime @rename(attribute: "updated_at")

}

enum UploadType {
    FILE @enum(value: "file")
    PATH @enum(value: "path")
    BASE64 @enum(value: "base64")
}
